<project xmlns:ivy="antlib:org.apache.ivy.ant" name="Utilities" default="build-all">

	<!-- Sets the jar version to the date, YYYYMMDD -->
	<tstamp>
		   <format property="jar.version" pattern="yyyyMMdd" />
	</tstamp>
	
	<property file="build.properties" />
	<property name="build.package.base.dir" value="${build.dir}/uk/ac/warwick/util" />
	<path id="external.libs.path" description="All external libraries">
		<fileset dir="${external.libs.dir}" includes="**/*.jar" />
	</path>

	<target name="build-all" depends="clean,init,compile,test,package" />

	<target name="bamboo" depends="clean,init,compile,test" />

	<target name="init" depends="clean">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${build.dir}"/>
		
		<mkdir dir="${build.dir}/cobertura" />
		<delete file="cobertura.ser" />
	</target>

	<target name="compile" depends="init">
		<mkdir dir="${build.dir}/all" />
		<mkdir dir="${build.dir}/core" />
		<mkdir dir="${build.dir}/core-nospring" />
		<mkdir dir="${build.dir}/web" />
		<mkdir dir="${build.dir}/hibernate" />
		<mkdir dir="${build.dir}/httpclient" />
		<mkdir dir="${build.dir}/ant" />
		<mkdir dir="${build.dir}/mail" />
		<mkdir dir="${build.dir}/content" />
		<mkdir dir="${build.dir}/cache" />
		<mkdir dir="${build.dir}/test" />

		<!-- let's compile in parallel for no particular reason! -->
		<parallel failonany="true" threadcount="2">

			<!-- all classes -->
			<javac fork="true" destdir="${build.dir}/all" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"/>

			<!-- core library -->
			<javac fork="true" destdir="${build.dir}/core" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/collections/**,uk/ac/warwick/util/concurrency/**,uk/ac/warwick/util/core/**" />
			
			
			<!-- core, but no spring -->
			<javac fork="true" destdir="${build.dir}/core-nospring" srcdir="${src.dir}" 
				includes="uk/ac/warwick/util/collections/**,
				          uk/ac/warwick/util/concurrency/**,
				          uk/ac/warwick/util/core/**"
				excludes="uk/ac/warwick/util/core/spring/**"
				classpathref="external.libs.path" target="1.5" debug="on">
			</javac>

			<!-- web library -->
			<javac fork="true" destdir="${build.dir}/web" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/web/**">
			</javac>

			<!-- httpclient library -->
			<javac fork="true" destdir="${build.dir}/httpclient" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/httpclient/**">
			</javac>

			<!-- web library -->
			<javac fork="true" destdir="${build.dir}/hibernate" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/hibernate/**" />

			<!-- ant library -->
			<javac fork="true" destdir="${build.dir}/ant" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/ant/**" />

			<!-- mail library -->
			<javac fork="true" destdir="${build.dir}/mail" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
			    includes="uk/ac/warwick/util/mail/**" />

			<!-- content library -->
			<javac fork="true" destdir="${build.dir}/content" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/content/**" />
			
			<!-- cache library -->
			<javac fork="true" destdir="${build.dir}/cache" srcdir="${src.dir}" classpathref="external.libs.path" target="1.5" debug="on"
				includes="uk/ac/warwick/util/cache/**" />
			
			<path id="test.compile.class.path">
				<path refid="external.libs.path" />
				<path path="${build.dir}/all" />
				<pathelement path="${build.dir}/unit-tests/resources" />
			</path>
			
			<!-- test library -->
			<javac fork="true" destdir="${build.dir}/test" srcdir="${test-src.dir}" classpathref="test.compile.class.path" target="1.5" debug="on" />
			
			<!-- Copy freemarker templates into /all and /content -->
			<copy todir="${build.dir}/all/freemarker">
				<fileset dir="${src.dir}/freemarker" />
			</copy>

			<copy todir="${build.dir}/content/freemarker">
				<fileset dir="${src.dir}/freemarker" />
			</copy>

			<copy todir="${build.dir}/all/uk/ac/warwick/util/core/" file="${src.dir}/uk/ac/warwick/util/core/HtmlCharacterEntityReferences.properties" />
			<copy todir="${build.dir}/core/uk/ac/warwick/util/core/" file="${src.dir}/uk/ac/warwick/util/core/HtmlCharacterEntityReferences.properties" />
			<copy todir="${build.dir}/core-nospring/uk/ac/warwick/util/core/" file="${src.dir}/uk/ac/warwick/util/core/HtmlCharacterEntityReferences.properties" />

			<copy todir="${build.dir}/all/">
				<fileset includes="**/*.rb" dir="${ruby-src.dir}" />
				<fileset includes="**/*.xml" dir="${src.dir}" />
			</copy>

			<copy todir="${build.dir}/cache">
				<fileset includes="**/*.xml" dir="${src.dir}" />
			</copy>

			<copy todir="${build.dir}/content/">
				<fileset includes="**/*.rb" dir="${ruby-src.dir}" />
			</copy>
		</parallel>
	</target>

	<target name="_compiletests" depends="compile">
		<mkdir dir="${build.dir}/unit-tests" />
		<!-- unit tests -->
		<javac destdir="${build.dir}/unit-tests" srcdir="${test-src.dir}" classpathref="external.libs.path" debug="on">
			<classpath location="${build.dir}/all" />
		</javac>
		
		<copy todir="${build.dir}/unit-tests">
            <fileset dir="${test-src.dir}" includes="**/*.xml" />
        	<fileset dir="${test-src.dir}" includes="**/*.csv" />
        	<fileset dir="${test-src.dir}" includes="**/*.sql" />
        	<fileset dir="${test-src.dir}" includes="**/*.properties" />
            <fileset dir="${test-src.dir}" includes="**/*.htm" />
            <fileset dir="${test-src.dir}" includes="**/*.html" />
            <fileset dir="${test-src.dir}" includes="**/*.zip" />
            <fileset dir="${test-src.dir}" includes="**/*.jpg" />
            <fileset dir="${test-src.dir}" includes="**/*.rss" />
            <fileset dir="${test-src.dir}" includes="**/*.txt" />
            <fileset dir="${test-src.dir}" includes="**/*.mp3" />
        	<fileset dir="${test-src.dir}" includes="**/*.tpl" />
        	<fileset dir="${test-src.dir}" includes="**/*.ftl" />
        	<fileset dir="${src.dir}" includes="META-INF/*"/>
        </copy>

		<copy todir="${build.dir}/unit-tests/resources">
			<fileset dir="${test-src.dir}/resources" />
		</copy>
	</target>
	
	<taskdef classpathref="external.libs.path" resource="tasks.properties"/>
	
	<target name="_instrument" depends="compile">
		<mkdir dir="${build.dir}/instrumented" />
		
		<cobertura-instrument todir="${build.dir}/instrumented">
			<ignore regex="org.apache.log4j.*" />
			
			<fileset dir="${build.dir}/all" />
		</cobertura-instrument>
	</target>
	
	<target name="test-coverage" depends="_instrument,test">
		<cobertura-report destdir="${build.dir}/cobertura" format="xml">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
				<exclude name="**/CVS/**/*.*" />
			</fileset>
		</cobertura-report>
	</target>
	
	<target name="test-coverage-html" depends="_instrument,test">
		<cobertura-report destdir="${build.dir}/cobertura">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
				<exclude name="**/CVS/**/*.*" />
			</fileset>
		</cobertura-report>
	</target>

	<target name="package" depends="compile">
		<copy file="META-INF/MANIFEST.MF" tofile="${build.dir}/MANIFEST.MF"/>
		<replace file="${build.dir}/MANIFEST.MF" token="$VERSION" value="${jar.version}" />

		<jar basedir="${build.dir}/all" destfile="${dist.dir}/${jar.name}-all.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/core" destfile="${dist.dir}/${jar.name}-core.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/core-nospring" destfile="${dist.dir}/${jar.name}-core-nospring.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/web" destfile="${dist.dir}/${jar.name}-web.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/hibernate" destfile="${dist.dir}/${jar.name}-hibernate.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/mail" destfile="${dist.dir}/${jar.name}-mail.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/httpclient" destfile="${dist.dir}/${jar.name}-httpclient.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/ant" destfile="${dist.dir}/${jar.name}-ant.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/content" destfile="${dist.dir}/${jar.name}-content.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/cache" destfile="${dist.dir}/${jar.name}-cache.jar" manifest="${build.dir}/MANIFEST.MF"/>
		<jar basedir="${build.dir}/test" destfile="${dist.dir}/${jar.name}-test.jar" manifest="${build.dir}/MANIFEST.MF"/>
		
		<zip destfile="${dist.dir}/${jar.name}-${jar.version}-src.zip" basedir="${src.dir}" />
		<zip destfile="${dist.dir}/${jar.name}-test-${jar.version}-src.zip" basedir="${test-src.dir}" />

		<copy file="WEB-INF/tld/warwick.tld" tofile="${dist.dir}/warwick.tld" />
		<copy file="WEB-INF/tld/textile.tld" tofile="${dist.dir}/textile.tld" />
	</target>

	<target name="clean">
		<delete>
			<fileset dir="${dist.dir}">
				<include name="**/*" />
				<exclude name="**/CVS/**/*.*" />
			</fileset>
		</delete>
		<delete dir="${build.dir}"/>
	</target>

	<target name="test" depends="compile,_compiletests,_instrument">
		<mkdir dir="${unit-test.report.dir}" />
		<path id="test.run.class.path">
			<path refid="external.libs.path" />
			<path path="${build.dir}/all" />
			<path path="${build.dir}/unit-tests" />
			<pathelement path="${build.dir}/unit-tests/resources" />
		</path>
		<junit printsummary="on" fork="on" forkmode="perBatch" haltonfailure="yes" failureproperty="tests.failed" filtertrace="on" showoutput="on" dir="${build.dir}">
			<!-- When we instrument we still include the original classes, we just put the instrumented ones first -->
			<classpath location="${build.dir}/instrumented" />
			
			<classpath refid="test.run.class.path" />
			<formatter type="xml" />
			<batchtest todir="${unit-test.report.dir}">
				<fileset dir="${build.dir}/unit-tests" includes="**/*Test.class" excludes="**/Abstract*.class" />
			</batchtest>
		</junit>
		<fail if="tests.failed" message="Unit tests failed" />
	</target>

	<target name="publish" depends="build-all">
		<!-- setup ivy default configuration with some custom info -->
		<ivy:configure file="ivysettings.xml" />

		<ivy:retrieve pattern="${external.libs.dir}/[artifact]/[artifact].[ext]" />

		<antcall target="build-all" />

		<property name="revision" value="${jar.version}"/>

		<ivy:publish 
		   artifactspattern="${dist.dir}/[artifact].[ext]" 
           resolver="dist"
           pubrevision="${revision}" 
           status="release"
		   overwrite="true"
    	/>

		<!-- Install dependencies to repository -->
		<ivy:install
			from="dist"
		  	to="dist"
		  	organisation="warwick"
		  	module="warwickutils"
		  	revision="${revision}"
		  	transitive="true"
		    overwrite="true"
		/>
	</target>

</project>